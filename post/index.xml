<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dominic Magirr</title>
    <link>/post/</link>
    <description>Recent content in Posts on Dominic Magirr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Longitudinal hurdle models 2</title>
      <link>/2019/10/23/longitudinal-hurdle-models-2/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/23/longitudinal-hurdle-models-2/</guid>
      <description>In a previous post I fit a longitudinal hurdle model using the brms package.
library(brms) summary(fit_hurdle) ## Family: hurdle_lognormal ## Links: mu = identity; sigma = identity; hu = logit ## Formula: y ~ time + (1 | q | id) ## hu ~ time + (1 | q | id) ## Data: dat (Number of observations: 800) ## Samples: 4 chains, each with iter = 4000; warmup = 2000; thin = 1; ## total post-warmup samples = 8000 ## ## Group-Level Effects: ## ~id (Number of levels: 100) ## Estimate Est.</description>
    </item>
    
    <item>
      <title>Longitudinal hurdle models</title>
      <link>/2019/10/16/longitudinal-hurdle-models/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/16/longitudinal-hurdle-models/</guid>
      <description>Data Recently I have been modelling data that is longitudinal, contains excess zeros, and where the non-zero data is right-skewed and measured on a continuous scale, rather than being count data.
I’ll simulate a semi-realistic example data set from a lognormal hurdle model. The “random effects” for the pr(zero) and non-zero parts of the model are negatively correlated.
set.seed(180) ## 100 patients id &amp;lt;- 1:100 ## 2 timepoints time &amp;lt;- c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;) ## random effects u &amp;lt;- rnorm(100, sd = 2) v &amp;lt;- rnorm(100, mean = -0.</description>
    </item>
    
    <item>
      <title>How to calculate the log-rank statistic</title>
      <link>/2019/06/03/log-rank-test/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/03/log-rank-test/</guid>
      <description>Suppose we have the following data.
df &amp;lt;- dplyr::tibble(patient_id = as.character(1:12), treatment = rep(c(&amp;quot;C&amp;quot;, &amp;quot;E&amp;quot;), each = 6), survival_time = survival::Surv(time = c(2,6,8,11,17,24,7,9,13,22,23,25), event = c(1,1,1,1,1,0,1,1,1,0,0,0))) knitr::kable(df)   patient_id treatment survival_time    1 C 2  2 C 6  3 C 8  4 C 11  5 C 17  6 C 24+  7 E 7  8 E 9  9 E 13  10 E 22+  11 E 23+  12 E 25+    Let’s arrange the data in increasing order of survival time.</description>
    </item>
    
  </channel>
</rss>