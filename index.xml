<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominic Magirr</title>
    <link>/</link>
    <description>Recent content on Dominic Magirr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>flexsurv 2</title>
      <link>/2019/11/01/flexsurv-2/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/01/flexsurv-2/</guid>
      <description>Previously, I started discussing the flexsurv package. I used it to fit a Weibull model. This is implemented as an accelerated failure time model. It is also a proportional hazards model (although, as I found previously, converting between the two is not so straightforward, but it can be done by SurvRegCensCov).
Now let’s compare Weibull regression with Cox regression. Firstly, Weibull regression:
 assumes proportional hazards; the number of parameters is equal to \(k + 2\), where \(k\) is the number of covariates; we can estimate things like the median, \(P(S&amp;gt;s^*)\), etc.</description>
    </item>
    
    <item>
      <title>flexsurv</title>
      <link>/2019/10/28/flexsurv/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/28/flexsurv/</guid>
      <description>I’m going to write about some of my favourite R packages. I’ll start with flexsurv (https://github.com/chjackson/flexsurv-dev) by Chris Jackson, which can be used to fit all kinds of parametric models to survival data. It can really do a lot, but I’ll pick out just 2 cool things I like about it:
Fit a standard survival model, but where it’s slightly easier to work out what the parameters mean. Fit a proportional hazards model, which is a lot like a Cox model, but where you also model the baseline hazard using a spline.</description>
    </item>
    
    <item>
      <title>Longitudinal hurdle models 3</title>
      <link>/2019/10/25/longitudinal-hurdle-models-3/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/25/longitudinal-hurdle-models-3/</guid>
      <description>In the last post on longitudinal hurdle models, I had just taken samples from the marginal mean
\[\begin{align} g(\theta; x) &amp;amp; = E(Y \mid \theta; x) \\ &amp;amp; = \int E(Y \mid u_{i&amp;#39;}, v_{i&amp;#39;}, \theta; x) f(u_{i&amp;#39;}, v_{i&amp;#39;} \mid \theta, \mathbf{y}) du_{i&amp;#39;}dv_{i&amp;#39;} \\ &amp;amp;\approx L^{-1}\sum_{l = 1}^{L}E(Y \mid u_{i&amp;#39;}^{(l)}, v_{i&amp;#39;}^{(l)}, \theta; x)\\ &amp;amp;= L^{-1}\sum_{l = 1}^{L}\left\lbrace 1 - \text{logit}^{-1} ( x^T \gamma + u_{i&amp;#39;}^{(l)}) \right\rbrace \exp(x^T\beta + v_{i&amp;#39;}^{(l)} + \frac{\sigma^2}{2}).</description>
    </item>
    
    <item>
      <title>Longitudinal hurdle models 2</title>
      <link>/2019/10/23/longitudinal-hurdle-models-2/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/23/longitudinal-hurdle-models-2/</guid>
      <description>In a previous post I fit a longitudinal hurdle model using the brms package.
library(brms) summary(fit_hurdle) ## Family: hurdle_lognormal ## Links: mu = identity; sigma = identity; hu = logit ## Formula: y ~ time + (1 | q | id) ## hu ~ time + (1 | q | id) ## Data: dat (Number of observations: 800) ## Samples: 4 chains, each with iter = 4000; warmup = 2000; thin = 1; ## total post-warmup samples = 8000 ## ## Group-Level Effects: ## ~id (Number of levels: 100) ## Estimate Est.</description>
    </item>
    
    <item>
      <title>Longitudinal hurdle models</title>
      <link>/2019/10/16/longitudinal-hurdle-models/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/16/longitudinal-hurdle-models/</guid>
      <description>Data Recently, I have been modelling data that is longitudinal, contains excess zeros, and where the non-zero data is right-skewed and measured on a continuous scale, rather than being count data.
I’ll simulate a semi-realistic example data set from a lognormal hurdle model. The “random effects” for the pr(zero) and non-zero parts of the model are negatively correlated.
set.seed(180) ## 100 patients id &amp;lt;- 1:100 ## 2 timepoints time &amp;lt;- c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;) ## random effects u &amp;lt;- rnorm(100, sd = 2) v &amp;lt;- rnorm(100, mean = -0.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I&amp;rsquo;m a medical statistician. Quite simply, I&amp;rsquo;m interested in clinical trial design, analysis and interpretation.
When I was around 16 or 17, I planned to study medicine. However, after doing some work experience and realizing how difficult that path would be, I decided to do a maths degree. Towards the end of my studies, I was fortunate to see a careers talk on Medical Statistics that led me to Lancaster University to do their MSc course &amp;ndash; a fantastic year, and I carried on to do a PhD.</description>
    </item>
    
    <item>
      <title>How to calculate the log-rank statistic</title>
      <link>/2019/06/03/log-rank-test/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/03/log-rank-test/</guid>
      <description>Suppose we have the following data.
df &amp;lt;- dplyr::tibble(patient_id = as.character(1:12), treatment = rep(c(&amp;quot;C&amp;quot;, &amp;quot;E&amp;quot;), each = 6), survival_time = survival::Surv(time = c(2,6,8,11,17,24,7,9,13,22,23,25), event = c(1,1,1,1,1,0,1,1,1,0,0,0))) knitr::kable(df)   patient_id treatment survival_time    1 C 2  2 C 6  3 C 8  4 C 11  5 C 17  6 C 24+  7 E 7  8 E 9  9 E 13  10 E 22+  11 E 23+  12 E 25+    Let’s arrange the data in increasing order of survival time.</description>
    </item>
    
  </channel>
</rss>